<?php

declare(strict_types=1);

namespace Technodelight\Jira\Helper;

use Technodelight\GitShell\ApiInterface as Api;
use Technodelight\GitShell\Branch;
use Technodelight\Jira\Domain\Issue;

class GitBranchCollector
{
    public function __construct(private readonly Api $git, private readonly GitBranchnameGenerator $generator)
    {
    }

    public function forIssue(Issue $issue): array
    {
        $generatedName = $this->generator->fromIssue($issue);
        return array_map(
            function(Branch $branch) {
                return sprintf('%s (%s)', $branch->name(), $branch->isRemote() ? 'remote' : 'local');
            },
            array_merge(
                $this->git->branches((string)$issue->issueKey()),
                $this->git->branches($generatedName)
            )
        );
    }

    public function forIssueWithAutoGenerated(Issue $issue)
    {
        if ($branches = $this->forIssue($issue)) {
            return $branches;
        }

        return [
            $this->generator->fromIssue($issue) . ' (generated)',
        ];
    }
}
